/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ContactUsImport } from './routes/contact-us'
import { Route as CaseStudiesImport } from './routes/case-studies'
import { Route as AppointmentsImport } from './routes/appointments'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const ContactUsRoute = ContactUsImport.update({
  id: '/contact-us',
  path: '/contact-us',
  getParentRoute: () => rootRoute,
} as any)

const CaseStudiesRoute = CaseStudiesImport.update({
  id: '/case-studies',
  path: '/case-studies',
  getParentRoute: () => rootRoute,
} as any)

const AppointmentsRoute = AppointmentsImport.update({
  id: '/appointments',
  path: '/appointments',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/appointments': {
      id: '/appointments'
      path: '/appointments'
      fullPath: '/appointments'
      preLoaderRoute: typeof AppointmentsImport
      parentRoute: typeof rootRoute
    }
    '/case-studies': {
      id: '/case-studies'
      path: '/case-studies'
      fullPath: '/case-studies'
      preLoaderRoute: typeof CaseStudiesImport
      parentRoute: typeof rootRoute
    }
    '/contact-us': {
      id: '/contact-us'
      path: '/contact-us'
      fullPath: '/contact-us'
      preLoaderRoute: typeof ContactUsImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/appointments': typeof AppointmentsRoute
  '/case-studies': typeof CaseStudiesRoute
  '/contact-us': typeof ContactUsRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/appointments': typeof AppointmentsRoute
  '/case-studies': typeof CaseStudiesRoute
  '/contact-us': typeof ContactUsRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/appointments': typeof AppointmentsRoute
  '/case-studies': typeof CaseStudiesRoute
  '/contact-us': typeof ContactUsRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/appointments' | '/case-studies' | '/contact-us'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/appointments' | '/case-studies' | '/contact-us'
  id: '__root__' | '/' | '/appointments' | '/case-studies' | '/contact-us'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppointmentsRoute: typeof AppointmentsRoute
  CaseStudiesRoute: typeof CaseStudiesRoute
  ContactUsRoute: typeof ContactUsRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppointmentsRoute: AppointmentsRoute,
  CaseStudiesRoute: CaseStudiesRoute,
  ContactUsRoute: ContactUsRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/appointments",
        "/case-studies",
        "/contact-us"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/appointments": {
      "filePath": "appointments.tsx"
    },
    "/case-studies": {
      "filePath": "case-studies.tsx"
    },
    "/contact-us": {
      "filePath": "contact-us.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
